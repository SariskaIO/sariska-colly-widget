import SariskaMediaTransport from "sariska-media-transport";
import { MUTE_ALL_TOGGLE, VIDEO_TOGGLE, WIDGET_TOGGLE, CALL_END, MIC_TOGGLE, RECORDING_TOGGLE, FULL_SCREEN_TOGGLE } from "../../constants";
import { getDimensions } from  "../../utils";
import "./index.scss";

class  {

   onCreate(input) {
      const { connection } = input;
      this.state = {
         conference: null,
         recordingSession: null,
         presenterId: null,
         remoteTracks : {},
         audioLevel:{},
         zoomIn: true,
         isMouseDown: false,
         coordinateShift: {},
         recordingEnabled: false,
         localTracks: []
      }

      this.mouseMoveRef = this.mouseMove.bind(this);
      const conference = connection.initJitsiConference({startAudioMuted: !input.audioEnabled, startVideoMuted: !input.videoEnabled});
      conference.on(SariskaMediaTransport.events.conference.TRACK_ADDED, removeTrackAdded.bind(this));
      conference.on(SariskaMediaTransport.events.conference.TRACK_REMOVED, remoteTrackRemoved.bind(this));
      conference.on(SariskaMediaTransport.events.conference.TRACK_MUTE_CHANGED, onTrackMuteChanged.bind(this));
      conference.on(SariskaMediaTransport.events.conference.TRACK_AUDIO_LEVEL_CHANGED, (participantId, audioLevel) => {
         this.state.audioLevel[participantId] = audioLevel;
         this.setStateDirty("audioLevel");
      });
      conference.on(SariskaMediaTransport.events.conference.CONFERENCE_JOINED, ()=>{
        conference.getParticipants().forEach(item=>{
            if (item._properties && item._properties.hasOwnProperty("recording")) {
                this.state.recordingEnabled = true;
            }
            if (item._properties.presenting === "start") {
              this.state.presenterId = participant._id;
            }
        });
      });

      conference.on(SariskaMediaTransport.events.conference.PARTICIPANT_PROPERTY_CHANGED, (participant, key, oldValue, newValue) =>{
          if (key === "presenting" && newValue === "start") {
              this.state.presenterId = participant._id;
              conference.selectParticipant(participant._id);
          }

          if (key === "presenting" && newValue === "stop") {
              this.state.presenterId = null;
              this.setStateDirty("remoteTracks");
          }
      });

      conference.join();
      this.state.conference = conference;
      input.conferenceInitialized(conference);

      const setupLocalStream = async ()=> {
         const tracks = await SariskaMediaTransport.createLocalTracks({devices:["audio", "video"], resolution: "180"});
         this.state.localTracks = tracks;
         
         const [ audioTrack, videoTrack] = tracks;

         await conference.addTrack(audioTrack);
         await conference.addTrack(videoTrack);

         input.tracksInitialized(tracks);
         this.setStateDirty("localTracks");
      }

      setupLocalStream();

      function remoteTrackRemoved(track) {
         const participantId = track.getParticipantId();
         if (participantId) {
            this.state.remoteTracks[participantId] = this.state.remoteTracks[participantId].filter((item) => item.getId() !== track.getId());
         }
         if (this.state.remoteTracks[participantId] && this.state.remoteTracks[participantId].length === 0) {
            delete this.state.remoteTracks[participantId];
         }
         this.setStateDirty("remoteTracks");
      }

      function removeTrackAdded(track) {
         if (!track  || track.isLocal()) {
             return;
         }
         const participantId = track.getParticipantId();
         if (!this.state.remoteTracks[participantId]) {
            this.state.remoteTracks[participantId] = [];
         }
         this.state.remoteTracks[participantId].push(track);
         this.setStateDirty("remoteTracks");
      }

      function onTrackMuteChanged() {
          this.setStateDirty("remoteTracks");
      }

      window.addEventListener("beforeunload", this.leaveConference.bind(this));
   }

   async videoControlAction(actionKey, value) {
       this.input.onMediaControlChange(actionKey, value);
       const [audioTrack, videoTrack] = this.state.localTracks; 
       switch(actionKey) {
          case VIDEO_TOGGLE:
             videoTrack.isMuted() ? videoTrack.unmute(): videoTrack.mute();
             break;
          case MIC_TOGGLE:
             audioTrack.isMuted() ? audioTrack.unmute(): audioTrack.mute();
             break;
          case FULL_SCREEN_TOGGLE:
             this.state.zoomIn = !this.state.zoomIn;
             break;
          default:
             console.log("hi")
       }
       this.setStateDirty("localTracks");
   }

   mouseUp() {
      setTimeout(()=>{ this.state.isMouseDown = false}, false);
      clearTimeout(this.timeout);
      this.skipMousemove = false;
      document.removeEventListener("mousemove", this.mouseMoveRef, true);
   }

   mouseMove(e) {
      const element = this.getEl("mediaWidget");
      const boudingRect  = element.getBoundingClientRect();
      element.style.bottom = this.state.coordinateShift.y - e.clientY + this.state.coordinateShift.bottom + 'px';
      element.style.left =  e.clientX - this.state.coordinateShift.left+ 'px';
   }

   mouseDown(e) {
      const element = this.getEl("mediaWidget");
      this.timeout = setTimeout(()=>{ this.state.isMouseDown = true }, 300);
      const boundingRect  = element.getBoundingClientRect();
      const bottom = e.clientY - boundingRect.bottom;
      const left = e.clientX - boundingRect.left;
      const dim = getDimensions();
      this.state.coordinateShift = { x: dim.x, y: dim.y, bottom, left};
      document.addEventListener("mousemove", this.mouseMoveRef, true);
   }

   closeSession(actionKey, value) {
      this.leaveConference();
      this.input.closeCurrentSession();
   }

   leaveConference(event) {
      if ( this.state.conference && this.state.conference.isJoined() ) {
         this.state.conference.leave().then(() => this.input.connection.disconnect(event));
      }
      this.state.localTracks.forEach(item => item.dispose())
   }

   onDestroy() {
     this.leaveConference();
   }

}

<div id="cb--media-container"  onMouseUp("mouseUp") onMouseDown("mouseDown") key="mediaWidget"  class=["cb__mediaContainer", "mdc-elevation--z6"]>
   <VideoControls 
        isPresenting=state.presenterId
        primaryColor = component.input.primaryColor
        primaryBackgroundColor = component.input.primaryBackgroundColor 
        recordingEnabled = state.recordingEnabled 
        isPublisher=component.input.isPublisher 
        closeSession = component.closeSession.bind(component)  
        videoControlAction = component.videoControlAction.bind(component) 
        widgetToggle=component.input.widgetToggle  
        videoEnabled=component.input.videoEnabled  
        muteAll=component.input.muteAll 
        videoWidget=component.input.videoWidget 
        zoomIn = state.zoomIn
   />
   <div class=["cb__mediaContainer__widget"]>
      <if(component.input.videoWidget)>
         <LocalStream 
              audioLevel = state.audioLevel
              usersList = component.input.usersList
              primaryBackgroundColor = component.input.primaryBackgroundColor
              primaryColor = component.input.primaryColor
              videoEnabled=component.input.videoEnabled  
              videoWidget = component.input.videoWidget     
              audioEnabled=component.input.audioEnabled  
              videoControlAction = component.videoControlAction.bind(component) 
              localTracks = state.localTracks 
              conference = state.conference
          />
          <RemoteStream
              audioLevel = state.audioLevel
              usersList = component.input.usersList
              zoomIn = state.zoomIn
              primaryBackgroundColor = component.input.primaryBackgroundColor
              primaryColor = component.input.primaryColor
              presenterId = state.presenterId
              videoWidget = component.input.videoWidget 
              remoteTracks = state.remoteTracks  
              videoControlAction = component.videoControlAction.bind(component) 
              conference = state.conference 
          />
      </if>

      <for|participantId, index| of=Object.keys(state.remoteTracks)>
         <if(state.remoteTracks[participantId][0])>
            <Audio key=state.remoteTracks[participantId][0].track.id track=state.remoteTracks[participantId][0] />
         </if>
      </for>

      <if(state.zoomIn)>
         <for|participantId, index| of=Object.keys(state.remoteTracks)>
            <if (participantId === state.presenterId && state.remoteTracks[participantId][1].getType() === "video")>
                  <LargeVideo
                     key=state.remoteTracks[participantId][1].track.id
                     isSharing = true 
                     user={} 
                     track=state.remoteTracks[participantId][1]
                  />
            </if>
         </for>
      </if>
   </div>
</div>
