import SariskaMediaTransport from "sariska-media-transport";
import mic from "../Icons/mic.marko";
import mic_off from "../Icons/mic_off.marko";
import screen_sharing from "../Icons/screen_sharing.marko";
import full_screen from "../Icons/fullscreen.marko";
import full_screen_exit from "../Icons/fullscreen_exit.marko";
import { MIC_TOGGLE, FULL_SCREEN_TOGGLE,VIDEO_TOGGLE } from "../../constants";
import { getDimensions , videoShadow} from  "../../utils";
import videocam from "../Icons/videocam.marko";
import videocam_off from "../Icons/videocam_off.marko";

import './index.scss';

class {
  onCreate(input) {
       this.state = {
          showTT: false
       }
       console.log('input', input);
   }
   
   onMount() {
      if (this.getEl("video")) {
         this.input.tracks[1].attach(this.getEl("video"));
      }
   }

   mouseOut() {
      this.state.showTT  = false;
   }

   mouseEnter() {
      this.state.showTT  = true;
   }

   onClick(param, value, isLocal) {
      if (!isLocal) {
         return;
      }
      this.input.videoControlAction(param, !value);
   }
}


<div.cb__video style={background: (component.input.tracks[1] && component.input.tracks[1].isMuted())  ? "#202124": ""}>
   <if(component.input.tracks[1].isMuted())>
      <div style={boxShadow: videoShadow(component.input.audioLevel), background: component.input.color, color: "white" } class="cb__video__thumbnail">${component.input.user.name && component.input.user.name[0]}</div>
   </if>
   <video style={ display: component.input.tracks[1] && component.input.tracks[1].isMuted() ? "none" : "block" } playsInline="1" autoPlay='1' key="video"/>

   <if(component.input.tracks[1].isLocal()) >
       <div class="cb__video__name">You</div>
   </if>
   <else>
       <div class="cb__video__name">${component.input.user.name}</div> 
   </else>

   <div class="cb__video__videoMicContainer">
      <if(component.input.tracks[0].isMuted())>
         <span onMouseOut("mouseOut") onMouseEnter("mouseEnter") onClick("onClick", MIC_TOGGLE, false, component.input.tracks[0].isLocal())  style={ color: component.input.primaryColor }   ><${mic_off}/></span>
      </if>
      <else>
         <span onMouseOut("mouseOut") onMouseEnter("mouseEnter") onClick("onClick", MIC_TOGGLE, true, component.input.tracks[0].isLocal())   style={ color: component.input.primaryColor }  ><${mic}/></span>
      </else>
      
      <if(component.input.tracks[1].isMuted())>
         <span onMouseOut("mouseOut") onMouseEnter("mouseEnter") onClick("onClick", VIDEO_TOGGLE, false, component.input.tracks[1].isLocal())  style={ color: component.input.primaryColor }   ><${videocam_off}/></span>
      </if>
      <else>
         <span onMouseOut("mouseOut") onMouseEnter("mouseEnter") onClick("onClick", VIDEO_TOGGLE, true, component.input.tracks[1].isLocal())   style={ color: component.input.primaryColor }  ><${videocam}/></span>
      </else>
   </div>
   <if(component.input.isPresenting)>
      <span.cb__video__screenSharing><${screen_sharing}/></span>
   </if>
</div>
